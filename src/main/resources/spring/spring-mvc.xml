<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!-- 扫描controller控制器所在的包，以完成bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.chatRobot.controller"/>

    <!-- 开启SpringMVC注解模式   代替注解映射器和注解适配器配置   默认加载很多的参数绑定方法（如json）-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>

    <!-- 静态资源默认servlet配置 -->
    <mvc:default-servlet-handler/>

    <!-- 配置jsp 显示ViewResolver （视图解析器）-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--自定义参数绑定-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <list>
                <!--日期类型转换-->
                <bean class="com.chatRobot.controller.converter.CustomDateConverter"/>
            </list>
        </property>
    </bean>

    <!-- 校验器，配置validator -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!--hibernate校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!--指定校验使用的配置文件，-->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!-- 配置validationMessageSource -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 指定校验信息的资源文件的基本文件名称，不包括后缀，后缀默认是properties -->
        <property name="basenames">
          <list>
              <value>customValidationMessage</value>
          </list>
        </property>
        <!-- 指定文件的编码 -->
        <property name="fileEncodings" value="utf8"/>
        <!-- 对资源文件内容缓存的时间，单位秒 -->
        <property name="cacheSeconds" value="120"/>
    </bean>

    <!-- 全局异常处理器 只要实现HandlerExceptionResolver接口就是全局异常处理器-->
    <bean class="com.chatRobot.exception.CustomExceptionResolver"/>

    <!-- 上传文件 配置multipart解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 最大内存大小 -->
        <property name="maxInMemorySize" value="10240"/>
        <!-- 最大文件大小，-1为不限制大小 -->
        <property name="maxUploadSize" value="-1"/>
    </bean>

    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <!-- 多个拦截器,顺序执行   /**表示所有url包括子url路径-->
        <!--登录认证拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="com.chatRobot.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
        <!--拦截器1-->
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="com.chatRobot.interceptor.HandlerInterceptor1"/>
        </mvc:interceptor>
        <!--拦截器2-->
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="com.chatRobot.interceptor.HandlerInterceptor2"/>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法(1,2)，然后逆序调用每个拦截器的postHandle和afterCompletion方法(2,1) -->
    </mvc:interceptors>
</beans>